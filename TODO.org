# TO DO

* authentication (google openid connect)
** DONE authomatic.oidc
- acts as middleware
- handles /login/provider/redirect 
- needs an http library to do exchange-token-for-code
- passes other requests through to next handler, after augmenting the
request to include authn details
https://developers.google.com/identity/protocols/OpenIDConnect#authenticatingtheuser
** DONE connect google authentication to local subscriber record
- authentications table has iss, sub, subscriber-id, display-name 
and a json field for all the other crap
- change the domain functions to use subscriber-id instead of handle

** TODO set hd param, check hd claim
https://developers.google.com/identity/protocols/OpenIDConnect#authenticationuriparameters
** review https://tools.ietf.org/id/draft-ietf-oauth-security-topics-05.html


* commenting:
** DONE add comments
** DONE view comments
** edit comments? nope, add another

* DONE edit proposal
** DONE add 'status' field   draft/open/complete/superseded
** DONE change description
** DONE change status (open/completed/withdrawn)
** DONE permissions: may subscriber S edit proposal P?


* deploy
** DONE plausible dev deploy
** TODO hide the postgres password
** DONE find out why we're writing empty log lines
- need to change "request" to something else
** live deploy

* proposal lifetime management
** DONE allow changing proposal status
** draft proposal is unpublished & may not be commented/worked on
** open status is default
** completed/withdrawn status may not be demoed
** sponsors are notified about demos
** interesteds are notified about changes

* make it look prettier

* figure out notification channel
** maybe email
** maybe rss
** some other slack integration?
** web notifications api
- https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API

* personal profile page
** what they've done
** what they're interested in
** what they've sponsored
  
